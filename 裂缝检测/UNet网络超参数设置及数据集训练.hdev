<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>***************************训练数据集</c>
<c>* 用户想要输入的图像大小，可更改</c>
<l>ImageWidth := 224</l>
<l>ImageHeight := 224</l>
<l>ImageNumChannels := 1</l>
<c>*存放分类图片的上一级路径</c>
<l>RawImageFolder := 'D:/桌面/数据集/'</l>
<c>*存放预处理数据的总路径</c>
<l>ExampleDataDir:= RawImageFolder+'class_data'</l>
<c>*存放预处理数据的二级路径</c>
<l>DataDirectoryBaseName := ExampleDataDir + '/dldataset_pokeman'</l>
<c>*数据集目录，用于由preprocess_dl_dataset编写的任何输出。</c>
<l>DataDirectory := DataDirectoryBaseName + '_' + ImageWidth + 'x' + ImageHeight</l>
<c>*预处理后的文件路径</c>
<l>DLDatasetFileName := DataDirectory+'/dl_dataset.hdict'</l>
<c>*预处理的参数文件路径</c>
<l>DLPreprocessParamFileName := DataDirectory + '/fissure_Preprocessing_parameters.hdict'</l>
<c>*最佳评估模型的输出路径。</c>
<l>BestModelBaseName := ExampleDataDir + '/best_dl_model_classification'</l>
<c>*最终训练模型的输出路径。</c>
<l>FinalModelBaseName := ExampleDataDir + '/final_dl_model_classification'</l>
<c>*读入在预处理过程中初始化的模型。也就是读取神经网络模型</c>
<l>Filename:='D:/桌面/数据集/UNet_3.hdl'</l>
<c>********************************************超参数设置</c>
<c>* Batch size.</c>
<l>BatchSize := 4</l>
<c>*学习率</c>
<l>InitialLearningRate := 0.0005</l>
<c>*如果批量小，动量应高。</c>
<l>Momentum := 0.99</l>
<c>* train_dl_model使用的参数。</c>
<c>*训练模型的时迭代次数。</c>
<l>NumEpochs := 50</l>
<c>*评估间隔（以时期计），以计算验证拆分上的评估度量。每迭代一次验证一次</c>
<l>EvaluationIntervalEpochs := 1</l>
<c>*在以下时期更改学习率，例如 [4、8、12]。</c>
<c>*如果不应该改变学习率，则将其设置为[]。</c>
<l>ChangeLearningRateEpochs := [3,6,8]</l>
<c>*将学习率更改为以下值，例如 InitialLearningRate * [0.1，0.01，0.001]。</c>
<c>*元组的长度必须与ChangeLearningRateEpochs相同。</c>
<c>*若第一次设置学习率，我们可以设初始学习率为0.001，</c>
<c>*在经过一定的回合后将学习率设为0.003，0.01，0.03，0.1，0.3等来测试初始学习率。</c>
<l>ChangeLearningRateValues := InitialLearningRate * [0.1,0.01,0.001]</l>
<c>*事先设定权重。</c>
<l>WeightPrior := 0.0001</l>
<c>*控制是否显示训练进度（是/否）。</c>
<l>DisplayEvaluation := true</l>
<c>*设置一个随机的种子进行训练。</c>
<l>RandomSeed := 42</l>
<c>*设置create_dl_train_param的通用参数。</c>
<c>*请参阅create_dl_train_param的文档以获取所有可用参数的概述。</c>
<l>GenParamName := []</l>
<l>GenParamValue := []</l>
<c>*扩充参数。</c>
<c>*如果在训练过程中应增加样本，请创建extend_dl_samples所需的字典。</c>
<c>*在这里，我们设置增强百分比和方法。</c>
<l>create_dict (AugmentationParam)</l>
<c>*要增加的样本百分比。</c>
<l>set_dict_tuple (AugmentationParam, 'augmentation_percentage', 20)</l>
<c>*沿行和列镜像。</c>
<l>set_dict_tuple (AugmentationParam, 'mirror', 'rc')</l>
<l>GenParamName := [GenParamName,'augment']</l>
<l>GenParamValue := [GenParamValue,AugmentationParam]</l>
<c></c>
<c></c>
<l>*SelectedPercentageTrainSamples := 20</l>
<c>* Set the x-axis argument of the training plots.</c>
<l>* XAxisLabel := 'epochs'</l>
<l>* create_dict (DisplayParam)</l>
<l>* set_dict_tuple (DisplayParam, 'selected_percentage_train_samples', SelectedPercentageTrainSamples)</l>
<l>* set_dict_tuple (DisplayParam, 'x_axis_label', XAxisLabel)</l>
<l>* GenParamName := [GenParamName,'display']</l>
<l>* GenParamValue := [GenParamValue,DisplayParam] </l>
<c>*更改策略。</c>
<c>*在训练过程中可以更改模型参数。</c>
<c>*在这里，如果上面指定了，我们将更改学习率。</c>
<l>if (|ChangeLearningRateEpochs| &gt; 0)</l>
<l>    create_dict (ChangeStrategy)</l>
<c>    * 指定要更改的模型参数，这里是学习率。</c>
<l>    set_dict_tuple (ChangeStrategy, 'model_param', 'learning_rate')</l>
<c>    * 从` initial_value `开始设置参数值。</c>
<l>    set_dict_tuple (ChangeStrategy, 'initial_value', InitialLearningRate)</l>
<c>    * 在接下来的几次减少学习率。</c>
<l>    set_dict_tuple (ChangeStrategy, 'epochs', ChangeLearningRateEpochs)</l>
<c>    * 将学习率降低到以下值。</c>
<l>    set_dict_tuple (ChangeStrategy, 'values', ChangeLearningRateValues)</l>
<c>    * 收集所有的变更策略作为输入。</c>
<l>    GenParamName := [GenParamName,'change']</l>
<l>    GenParamValue := [GenParamValue,ChangeStrategy]</l>
<l>endif</l>
<c>* </c>
<c>*序列化策略。</c>
<c>*有多种选项可用于将中间模型保存到磁盘（请参见create_dl_train_param）。</c>
<c>*在这里，我们将最佳模型和最终模型保存到上面设置的路径中。</c>
<l>create_dict (SerializationStrategy)</l>
<l>set_dict_tuple (SerializationStrategy, 'type', 'best')</l>
<l>set_dict_tuple (SerializationStrategy, 'basename', BestModelBaseName)</l>
<l>GenParamName := [GenParamName,'serialize']</l>
<l>GenParamValue := [GenParamValue,SerializationStrategy]</l>
<l>create_dict (SerializationStrategy)</l>
<l>set_dict_tuple (SerializationStrategy, 'type', 'final')</l>
<l>set_dict_tuple (SerializationStrategy, 'basename', FinalModelBaseName)</l>
<l>GenParamName := [GenParamName,'serialize']</l>
<l>GenParamValue := [GenParamValue,SerializationStrategy]</l>
<c>* </c>
<c>*显示参数。</c>
<c>*在此示例中，选择了20％的训练分组以显示</c>
<c>*评估在训练过程中减少训练次数的评估措施。 较低的百分比</c>
<c>*有助于加快评估/培训。 如果评估措施用于培训分裂</c>
<c>*不会显示，将此值设置为0（默认值）。</c>
<l>SelectedPercentageTrainSamples := 20</l>
<l>create_dict (DisplayParam)</l>
<l>set_dict_tuple (DisplayParam, 'selected_percentage_train_samples', SelectedPercentageTrainSamples)</l>
<l>GenParamName := [GenParamName,'display']</l>
<l>GenParamValue := [GenParamValue,DisplayParam]</l>
<c>*检查是否所有必需的文件都存在。</c>
<l>file_exists (ExampleDataDir, PathExists)</l>
<l>if ( not PathExists)</l>
<l>    throw (ExampleDataDir+'相关文件不存在')</l>
<l>endif</l>
<c>*检测预处理参数文件是否存在</c>
<l>file_exists (DLPreprocessParamFileName, FileExists)</l>
<l>if ( not FileExists)</l>
<l>    throw (DLPreprocessParamFileName+'相关文件不存在')</l>
<l>endif</l>
<c>*检测Dataset文件是否存在</c>
<l>file_exists (DLDatasetFileName, FileExists)</l>
<l>if ( not FileExists)</l>
<l>    throw (DLDatasetFileName+'相关文件不存在')</l>
<l>endif</l>
<c>*</c>
<c>******************采用GPU训练</c>
<c>*查询GPU信息</c>
<l>* query_available_compute_devices (DeviceIdentifier)    //查询数量</l>
<l>* get_compute_device_info (DeviceIdentifier, 'name', Info)    //查询相应信息</l>
<c>*判断GPU是否可用</c>
<l>* get_system ('cuda_loaded', CudaLoaded)</l>
<l>* get_system ('cudnn_loaded', CuDNNLoaded)</l>
<l>* get_system ('cublas_loaded', CuBlasLoaded)</l>
<l>* if (not (CudaLoaded == 'true' and CuDNNLoaded == 'true' and CuBlasLoaded == 'true'))</l>
<l>*     UseGPU := false</l>
<l>* endif</l>
<c></c>
<l>* query_available_dl_devices (['runtime', 'runtime'], ['gpu', 'cpu'], DLDeviceHandles)</l>
<l>* if (|DLDeviceHandles| == 0)</l>
<l>*     throw ('没有找到支持的设备以继续.')</l>
<l>* endif</l>
<c>* 采用第一个设备.</c>
<l>* DLDevice := DLDeviceHandles[0]</l>
<l>* get_dl_device_param (DLDevice, 'type', DLDeviceType)</l>
<l>* if (DLDeviceType == 'cpu')</l>
<c>    *如果采用CPU训练</c>
<c>    * 使用的线程数量可能会有影响</c>
<c>    * 训练时长</c>
<l>*     NumThreadsTraining := 4</l>
<l>*     set_system ('thread_num', NumThreadsTraining)</l>
<l>* endif</l>
<c></c>
<c>*********************</c>
<c>* </c>
<c></c>
<c>*读入在预处理过程中初始化的模型。也就是读取神经网络模型</c>
<l>read_dl_model (Filename, DLModelHandle)</l>
<c>*</c>
<l>* set_dl_model_param (DLModelHandle, 'device', DLDevice)</l>
<c>*读取预处理后的图片DLDataset文件。</c>
<l>read_dict (DLDatasetFileName, [], [], DLDataset)</l>
<c>*****************************************得到预处理信息并赋与神经网络模型</c>
<l>get_dict_tuple (DLDataset, 'preprocess_param', DLPreprocessParam)</l>
<l>get_dict_tuple (DLDataset, 'class_ids', ClassIDs)</l>
<l>set_dl_model_param_based_on_preprocessing (DLModelHandle, DLPreprocessParam, ClassIDs)</l>
<c></c>
<c></c>
<c>*****************************************</c>
<c>*按照上述设置指定模型超参数。</c>
<l>set_dl_model_param (DLModelHandle, 'learning_rate', InitialLearningRate)</l>
<l>set_dl_model_param (DLModelHandle, 'momentum', Momentum)</l>
<c>*设置模型的类名。</c>
<l>get_dict_tuple (DLDataset, 'class_names', ClassNames)</l>
<l>set_dl_model_param (DLModelHandle, 'class_names', ClassNames)</l>
<c>*设置输入模型的图片大小和维度</c>
<l>set_dl_model_param (DLModelHandle, 'image_dimensions', [ImageWidth,ImageHeight,ImageNumChannels])</l>
<c>*设置样本尺寸</c>
<l>if (BatchSize == 'maximum')</l>
<l>    set_dl_model_param_max_gpu_batch_size (DLModelHandle, 100)</l>
<l>else</l>
<l>    set_dl_model_param (DLModelHandle, 'batch_size', BatchSize)</l>
<l>endif</l>
<c>*设置权重</c>
<l>if (|WeightPrior| &gt; 0)</l>
<l>    set_dl_model_param (DLModelHandle, 'weight_prior', WeightPrior)</l>
<l>endif</l>
<l>get_dl_model_param (DLModelHandle, 'batch_size', GenParamValue1)</l>
<c>*优化模型进行推理，</c>
<c>*意思是，减少内存消耗。</c>
<l>set_dl_model_param (DLModelHandle, 'optimize_for_inference', 'true')</l>
<c>*设置GPU内存初始化，提高运行效率，若用CPU训练可忽略</c>
<l>set_dl_model_param (DLModelHandle, 'runtime_init', 'immediately')</l>
<c>*为了避免深度学习工作时的内存问题，增加 "硬盘交换文件 "的大小。</c>
<l>set_system ('cudnn_deterministic', 'true')</l>
<l>stop()</l>
<c></c>
<c>*创建训练参数。有超参数的传入GenParamName、GenParamValue</c>
<l>create_dl_train_param (DLModelHandle, NumEpochs, EvaluationIntervalEpochs, \
                       DisplayEvaluation, RandomSeed, GenParamName, GenParamValue, TrainParam)</l>
<c></c>
<c>*开始训练。</c>
<l>train_dl_model (DLDataset, DLModelHandle, TrainParam, 0, TrainResults, TrainInfos, EvaluationInfos)</l>
<l>stop()</l>
<c>* 关闭训练窗口。</c>
<l>dev_close_window ()</l>
<c>*******************************************************************评估****************************************************</c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
